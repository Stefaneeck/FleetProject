// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories;

namespace Repositories.Migrations
{
    [DbContext(typeof(AllphiFleetContext))]
    [Migration("20201116131326_allphidb.16nov2")]
    partial class allphidb16nov2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Models.Aanvraag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DatumAanvraag")
                        .HasColumnType("datetime2");

                    b.Property<string>("GewensteData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusAanvraag")
                        .HasColumnType("int");

                    b.Property<int>("TypeAanvraag")
                        .HasColumnType("int");

                    b.Property<long>("VoertuigId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VoertuigId");

                    b.ToTable("Aanvraag");
                });

            modelBuilder.Entity("Models.Adres", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("Nummer")
                        .HasColumnType("int");

                    b.Property<int>("Postcode")
                        .HasColumnType("int");

                    b.Property<string>("Stad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Straat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Adressen");
                });

            modelBuilder.Entity("Models.Chauffeur", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<bool>("Actief")
                        .HasColumnType("bit");

                    b.Property<long>("AdresId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RijksRegisterNummer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TankkaartId")
                        .HasColumnType("bigint");

                    b.Property<int>("TypeRijbewijs")
                        .HasColumnType("int");

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdresId");

                    b.HasIndex("TankkaartId");

                    b.ToTable("Chauffeurs");
                });

            modelBuilder.Entity("Models.Factuur", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("NaamGefactureerde")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Factuur");
                });

            modelBuilder.Entity("Models.Herstelling", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DatumHerstelling")
                        .HasColumnType("datetime2");

                    b.Property<string>("Documenten")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fotos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchadeOmschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("VerzekeringsMaatschappijId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VerzekeringsMaatschappijId");

                    b.ToTable("Herstelling");
                });

            modelBuilder.Entity("Models.Nummerplaat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("NummerPlaatTekens")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("VoertuigId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VoertuigId");

                    b.ToTable("Nummerplaat");
                });

            modelBuilder.Entity("Models.Onderhoud", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DatumOnderhoud")
                        .HasColumnType("datetime2");

                    b.Property<long>("FactuurId")
                        .HasColumnType("bigint");

                    b.Property<string>("Garage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Prijs")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("VoertuigId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FactuurId");

                    b.HasIndex("VoertuigId");

                    b.ToTable("Onderhoud");
                });

            modelBuilder.Entity("Models.Tankkaart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("AuthType")
                        .HasColumnType("int");

                    b.Property<DateTime>("GeldigheidsDatum")
                        .HasColumnType("datetime2");

                    b.Property<int>("Kaartnummer")
                        .HasColumnType("int");

                    b.Property<string>("Opties")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pincode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tankkaarten");
                });

            modelBuilder.Entity("Models.VerzekeringsMaatschappij", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("ReferentieNrVerzekeringsMaatschappij")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("VerzekeringsMaatschappij");
                });

            modelBuilder.Entity("Models.Voertuig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("KilometerStand")
                        .HasColumnType("int");

                    b.Property<int>("TypeBrandStof")
                        .HasColumnType("int");

                    b.Property<int>("TypeWagen")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Voertuig");
                });

            modelBuilder.Entity("Models.Aanvraag", b =>
                {
                    b.HasOne("Models.Voertuig", "Voertuig")
                        .WithMany("Aanvragen")
                        .HasForeignKey("VoertuigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Voertuig");
                });

            modelBuilder.Entity("Models.Chauffeur", b =>
                {
                    b.HasOne("Models.Adres", "Adres")
                        .WithMany("Chauffeurs")
                        .HasForeignKey("AdresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Tankkaart", "Tankkaart")
                        .WithMany("Chauffeurs")
                        .HasForeignKey("TankkaartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adres");

                    b.Navigation("Tankkaart");
                });

            modelBuilder.Entity("Models.Herstelling", b =>
                {
                    b.HasOne("Models.VerzekeringsMaatschappij", "VerzekeringsMaatschappij")
                        .WithMany("Herstellingen")
                        .HasForeignKey("VerzekeringsMaatschappijId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VerzekeringsMaatschappij");
                });

            modelBuilder.Entity("Models.Nummerplaat", b =>
                {
                    b.HasOne("Models.Voertuig", "Voertuig")
                        .WithMany("Nummerplaten")
                        .HasForeignKey("VoertuigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Voertuig");
                });

            modelBuilder.Entity("Models.Onderhoud", b =>
                {
                    b.HasOne("Models.Factuur", "Factuur")
                        .WithMany("OnderhoudenOpFactuur")
                        .HasForeignKey("FactuurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Voertuig", "Voertuig")
                        .WithMany("OnderhoudsBeurten")
                        .HasForeignKey("VoertuigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factuur");

                    b.Navigation("Voertuig");
                });

            modelBuilder.Entity("Models.Adres", b =>
                {
                    b.Navigation("Chauffeurs");
                });

            modelBuilder.Entity("Models.Factuur", b =>
                {
                    b.Navigation("OnderhoudenOpFactuur");
                });

            modelBuilder.Entity("Models.Tankkaart", b =>
                {
                    b.Navigation("Chauffeurs");
                });

            modelBuilder.Entity("Models.VerzekeringsMaatschappij", b =>
                {
                    b.Navigation("Herstellingen");
                });

            modelBuilder.Entity("Models.Voertuig", b =>
                {
                    b.Navigation("Aanvragen");

                    b.Navigation("Nummerplaten");

                    b.Navigation("OnderhoudsBeurten");
                });
#pragma warning restore 612, 618
        }
    }
}
